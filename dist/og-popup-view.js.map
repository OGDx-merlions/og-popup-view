{"version":3,"sources":["og-popup-view.es6.js"],"names":["Polymer","is","properties","clickAble","type","Boolean","value","coverHeight","stickToParent","disableDrawerSwipe","defaultValue","backgroundColor","String","fullScreenSize","extraMargin","Number","backButton","_secondScreen","notify","attached","context","contentContainer","document","getElementById","closeBtn","querySelector","drawerMainContainer","containerBox","parentNode","getBoundingClientRect","containerSize","top","height","style","marginTop","padding","bottom","boxShadow","overflow","_createListeners","scrollY","window","resetStates","callback","addEventListener","_isResetingFromBackground","e","target","id","_extendDrawer","_updateView","scale","customStyle","updateStyles","closing","drawer","close","containerWidth","innerWidth","left","backToSmall"],"mappings":"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","file":"og-popup-view.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'og-popup-view',\n\n    properties: {\n      /**\n      * This property enable the second screen display.\n      *\n      * @property clickAble\n      */\n      clickAble: {\n        type: Boolean,\n        value: false,\n      },\n\n      /**\n      * This property allow convering all the height of the window.\n      *\n      * @property coverHeight\n      */\n      coverHeight: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n      * This property will render the component below its parent if enabled.\n      *\n      * @property stickToParent\n      */\n      stickToParent: {\n        type: Boolean,\n        value: false,\n      },\n\n      /**\n      * This property will render the component below its parent if enabled.\n      *\n      * @property disableDrawerSwipe\n      */\n      disableDrawerSwipe: {\n        type: Boolean,\n        defaultValue: false,\n      },\n\n      /**\n      * This property defines the background color, value is an HEX base\n      *\n      * @property backgroundColor\n      */\n      backgroundColor: {\n        type: String,\n        defaultValue: \"#fff\",\n      },\n\n      /**\n      * This property allow configuring the size of the second screen, use css % or px\n      *\n      * @property fullScreenSize\n      */\n      fullScreenSize: {\n        type: String,\n        value: \"80%\",\n      },\n\n      /**\n      * This property allow adding extra margin for the position of the mini view allowing precise control\n      *\n      * @property extraMargin\n      */\n      extraMargin: {\n        type: Number,\n        value: 0,\n      },\n\n      /**\n      * This property will hide/show the back button when being in the second screen\n      *\n      * @property backButton\n      */\n      backButton: {\n        type: Boolean,\n        value: false,\n      },\n\n      /**\n      * This property check the state of screen, if false, it means the state is in first screen which is the default value.\n      *\n      * @property _secondScreen\n      */\n      _secondScreen: {\n        type: Boolean,\n        notify:true,\n        value: false,\n      },\n    },\n\n    attached: function () {\n      const context = this;\n      const contentContainer = document.getElementById(\"contentContainer\");\n      const closeBtn = document.querySelector(\".close-btn\");\n      const drawerMainContainer = document.getElementById(\"drawer-main-container\");\n      const containerBox = context.parentNode.getBoundingClientRect();\n      const containerSize = containerBox.top + containerBox.height + context.extraMargin;\n      contentContainer.style.marginTop = `${containerSize}px`;\n      contentContainer.style.padding = 0;\n      if (!this.coverHeight) {\n        contentContainer.style.bottom = \"initial\";\n      }\n      contentContainer.style.backgroundColor = context.backgroundColor;\n      contentContainer.style.boxShadow = \"0 2px 4px 0 rgba(0, 0, 0, 0.5)\";\n      closeBtn.style.backgroundColor = context.backgroundColor;\n      contentContainer.style.overflow = \"initial\";\n\n      if (!this.stickToParent) {\n        contentContainer.style.marginTop = 0;\n        contentContainer.style.overflow = \"auto\";\n      }\n      else {\n        this._createListeners(\"scroll\", function () {\n          const scrollY = window.scrollY;\n          if (scrollY >= containerSize) {\n            contentContainer.style.marginTop = 0;\n            contentContainer.style.overflow = \"auto\";\n            return;\n          }\n          contentContainer.style.marginTop = `${containerSize - scrollY}px`;\n          contentContainer.style.overflow = \"initial\";\n        });\n      }\n\n      this._createListeners(\"resize\", function () {\n        if (!context._secondScreen) {\n          context.resetStates();\n        }\n      });\n    },\n\n    /**\n    * Create listeners\n    *\n    * @method _createListeners\n    */\n    _createListeners: function(type, callback) {\n      window.addEventListener(type, callback, true);\n    },\n\n    /**\n    * When clicking in the background, resets component states\n    *\n    * @method _isResetingFromBackground\n    */\n    _isResetingFromBackground: function(e) {\n      if (e.target.id === 'scrim') {\n        this.resetStates();\n      }\n      // drawer.close();\n    },\n\n    /**\n    * Method callback listener for the tap/click action if click-able is true.\n    *\n    * @method _extendDrawer\n    */\n    _extendDrawer: function(){\n      if (this.clickAble) {\n        this._updateView(this.fullScreenSize);\n        this._secondScreen = true;\n        this.disableDrawerSwipe = true;\n      }\n    },\n\n    /**\n    * View is update from its scale with for second screen on tap.\n    *\n    * @method _updateView\n    */\n    _updateView: function(scale = 0) {\n      this.customStyle[\"--app-drawer-width\"] = scale;\n      this.updateStyles();\n    },\n\n    /**\n    * Directly access drawer and close it and reset states of the component.\n    *\n    * @method closing\n    */\n    closing: function() {\n      this.resetStates();\n      drawer.close();\n    },\n\n    /**\n    * Reset component states.\n    *\n    * @method resetStates\n    */\n    resetStates: function() {\n      const containerWidth = window.innerWidth - this.parentNode.getBoundingClientRect().left;\n\n      this._updateView(`${containerWidth}px`);\n      this._secondScreen = false;\n      this.disableDrawerSwipe = false;\n    },\n\n    /**\n    * Method allowing getting back to first screen.\n    *\n    * @method backToSmall\n    */\n    backToSmall: function() {\n      this.resetStates();\n    },\n  });\n})();\n"]}